1.1、JavaScript是基于对象和事件驱动的(动态的)

　　它可以直接对用户或客户输入做出响应，无须经过Web服务程序。它对用户的响应，是采用以事件驱动的方式进行的。
　　所谓事件驱动，就是指在主页中执行了某种操作所产生的动作，就称为“事件”。比如按下鼠标，移动窗口，选择菜单等都可以视为事件。
　　当事件发生后，可能会引起相应的事件响应。

1.2、JavaScript是跨平台的

　　JavaScript是依赖于浏览器本身的，与操作系统无关。
2.3、使用typeof关键字查看变量代表的具体数据类型

　　typeof 运算符有一个参数，即要检查的变量或值。例如：

    1 var sTemp = "test string";
    2 alert (typeof sTemp);    //输出 "string"
    3 alert (typeof 86);    //输出 "number"
3.3.2、引用数据类型
    javascript引用数据类型是保存在堆内存中的对象，JavaScript不允许直接访问堆内存空间中的位置和操作堆内存空间
    只能通过操作对象在栈内存中的引用地址。所以引用类型的数据，在栈内存中保存的实际上是对象在堆内存中的引用地址
    通过这个引用地址可以快速查找到保存在堆内存中的对象。
    由上面例子，我们声明了一个引用数据类型变量obj1，并把它赋值给了另外一个引用数据类型变量obj2。
　当我们obj2添加了一个name属性并赋值" 孤傲苍狼"。obj1同样拥有了和obj2一样的name属性。
　说明这两个引用数据类型变量指向同一个对象。obj1赋值给obj2，实际只是把这个对象在栈内存的引用地址复制了一份给了obj2，
　但它们本质上共同指向了堆内存中的同一个对象。
4.  自然，给obj2添加name属性，实际上是给堆内存中的对象添加了name属性，obj2和obj1在栈内存中保存的只是堆内存对象的引用地址，
虽然也是拷贝了一份，但指向的对象却是同一个。故而改变obj2引起了obj1的改变。
一般而言，基本数据类型是由固定数目的字节组成，这些字节可以在解析器的较底层进行操作，
比如Number和 Boolean；而引用数据类型，可以包含任意数目的属性和元素，因此它们无法像基本数据类型那样很容易的操作。
由于，引用数据类型的值是会发生变化的， 所以通过跟基本数据类型一样的值传递方式，也就没什么意义了，
因为会牵涉到大量的内存的复制和比较，效率太低。所以引用数据类型是通过引用传递方式，实际传递的只是对象的一个地址。
比如Array和Function，因为它们都是特殊的对象所以它们都是引用类型。另外，引用类型是可以添加属性，基本类型虽然也可以添加属性，
也不会报错，经测试添加完之后却是无法访问的。
